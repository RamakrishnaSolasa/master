environment setup 
------------------------

    1. openjdk 8 
    2. STS or Eclipse 
    3. nodejs v14.x 
    4. mongodb community edition 
    5. mysql community edition 


core java 
--------------
    - oops concepts 
    - collection 
    - threading, thread pool, executors 
    - IO 
    - exception handling 
    - java8 
    - JDBC 
   


Spring 
----------
    spring versions 
        - spring 1.x 
            - 1. Core 
              2. AOP 
              3. JDBC/DAO 
              4. ORM 
              5. Tx 
              6. WEb and Web MVC 
              7. Security 

        - spring 2.x 

        - spring 3.x 

        - spring 4.x 

        - spring 5.x 

    spring modules 
        - spring Core 
        - Spring AOP
        - spring REST 
        - spring boot
        - spring Data 
        - Spring Security 
        - Spring Cloud  


        - what is java bean  
            - simple java classes like POJO 
            - public default constructor 
            - all members are private 
            - public getter / setter methods 
            - implements serializable interface 

        - what is spring bean
            - a bean is an object that is instantiated, assembled or managed by a spring IOC container 

        - what is IOC
            - IOC is a principle in soft engineering which delegates the control of objects to a "container"

            - used for decoupling the execution of a task from its implementation 
            - makes it easy to switch between diff implementations 
            - helps to implement greater modularity in applications 

        - what is container 
            - creates objects (instantiation), initialize values to them (initialization), 
                wire them together (dependency injection), etc. 
            - it manages the entire life cycle of objects 


            - BeanFactory (i)
                -* deprecated from spring 3.x 

            - ApplicationContext (i)



        - Bean Configuration / bean defination 

                - using xml 

                - using anotations 

                - using java configuration 

        - what is the bean life cycle, how to configure the beans 

                start container ---> container instantiate beans -----> dependencies injected 
                                                                            |
                                                                            |
                                                                          init() 
                                                                            |
                                                                            |
                                                                          destroy()

                ** implement the bean life cycle 
        
        
         
        
        - how does container create objects 
        
        - dependency injections 
                - constructor DI 
                - Setter DI 
                - interface DI 
        
        - autowiring 
        
        - exception handling 
        
        - spring expression language 


        - spring Core 
            - bean definition, bean lifecycle, ioc containers, beanfactory, ApplicationContext
            - dependency injection 
            - autowiring 
            - spring expression language 
            - I18N 
            - exception handling 
            - event notification model 


    




        - Spring AOP
            - we can separate all service logic from business logic 

        - Spring Data 
                - to interact with the database 
                - Spring Data JPA 
                - Spring Data MongoDB 
                - Spring Data REST 

        - Spring REST 

        - spring boot

        - Spring Security 

        - Spring Cloud 



        ORM tools       jpa implementations 
        Hibernate ----> hibernate jpa 

        iBatis ----->   mybatis 

        TopLink -------> Eclipselink 


        - JPA 
            - it is specification for ORM, every ORM tool must implement these specifications 
            - standaridization 
            - JPA is an abstraction over jdbc that makes it possible to be indepedent of database 
            - it brings easy mechanism to map the objects to relational databases 
            - it has an 'EntityManager' api to perform db related operations 
            - JPA also come up with JPQL 

        - JPA Implementations 
                - jpa provider 
                - it is a jpa implementation
            - Hibernate 
            - EclipsLink 
            - MyBatis 
            - OpenJPA

        - EntityManager
            - it is an interface for persisting objects into the db 
            - manages the state and lifecycle of entities, and uses the JPQL queries to retrieve the entities from the db 


        - JPA Entity 
            - Entities are the objects which are managed by the EntityManager
                - the objects that are mapped with relational tables, persisted in to the db, can be queried from the db 
            - entities are objects which live shortly in memory and persistently in db 
            -* an Entity class can be either concrete class or abstract class 
            -* entities also supports inheritance, relationships 
            - Entity class mush have...     
                    @Entity annotation 
                    define an identifier field (using @Id annotation)
                    must have a no-arg constructor 

            @Entity
            public class Book {

                @Id 
                private int id;

                public Book(){}

            }

        - Persistence unit 
            - a named configuration for a set of "entities" you want to persist 


        - Entity State

        - Default Mapping 

        - Custom Mapping 

        - Entity Relationships 

        - Entity Inheritance 





        - Spring Data JPA
            - it is an integration layer to integrate all types of ORM implementations like Hibernate, eclipselink, mybatis etc. 